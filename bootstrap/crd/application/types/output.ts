// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace argoproj {
    export namespace v1alpha1 {
        /**
         * Operation contains information about a requested or running operation
         */
        export interface ApplicationOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationOperationInitiatedby;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationOperationSync;
        }

        export interface ApplicationOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationOperationInitiatedby {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to If omitted, will use the revision specified in app spec.
             */
            revisions?: string[];
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSource;
            /**
             * Sources overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSources[];
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationOperationSyncSourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationOperationSyncSources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationOperationSyncSourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationOperationSyncSourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationOperationSyncSourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationOperationSyncSourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationOperationSyncSourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationOperationSyncSyncstrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncstrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationOperationSyncSyncstrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationOperationSyncSyncstrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
         */
        export interface ApplicationSpec {
            /**
             * Destination is a reference to the target Kubernetes server and namespace
             */
            destination: outputs.argoproj.v1alpha1.ApplicationSpecDestination;
            /**
             * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
             */
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSpecIgnoredifferences[];
            /**
             * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
             */
            info?: outputs.argoproj.v1alpha1.ApplicationSpecInfo[];
            /**
             * Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
             */
            project: string;
            /**
             * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Source is a reference to the location of the application's manifests or chart
             */
            source?: outputs.argoproj.v1alpha1.ApplicationSpecSource;
            /**
             * Sources is a reference to the location of the application's manifests or chart
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationSpecSources[];
            /**
             * SyncPolicy controls when and how a sync will be performed
             */
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicy;
        }

        /**
         * Destination is a reference to the target Kubernetes server and namespace
         */
        export interface ApplicationSpecDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
         */
        export interface ApplicationSpecIgnoredifferences {
            group?: string;
            jqPathExpressions?: string[];
            jsonPointers?: string[];
            kind: string;
            /**
             * ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
             */
            managedFieldsManagers?: string[];
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSpecInfo {
            name: string;
            value: string;
        }

        /**
         * Source is a reference to the location of the application's manifests or chart
         */
        export interface ApplicationSpecSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationSpecSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationSpecSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationSpecSourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationSpecSources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationSpecSourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationSpecSourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationSpecSourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationSpecSourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationSpecSourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * SyncPolicy controls when and how a sync will be performed
         */
        export interface ApplicationSpecSyncpolicy {
            /**
             * Automated will keep an application synced to the target revision
             */
            automated?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyAutomated;
            /**
             * ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
             */
            managedNamespaceMetadata?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyManagednamespacemetadata;
            /**
             * Retry controls failed sync retry behavior
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyRetry;
            /**
             * Options allow you to specify whole app sync-options
             */
            syncOptions?: string[];
        }

        /**
         * Automated will keep an application synced to the target revision
         */
        export interface ApplicationSpecSyncpolicyAutomated {
            /**
             * AllowEmpty allows apps have zero live resources (default: false)
             */
            allowEmpty?: boolean;
            /**
             * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
             */
            prune?: boolean;
            /**
             * SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
             */
            selfHeal?: boolean;
        }

        /**
         * ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
         */
        export interface ApplicationSpecSyncpolicyManagednamespacemetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Retry controls failed sync retry behavior
         */
        export interface ApplicationSpecSyncpolicyRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationSpecSyncpolicyRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationSpecSyncpolicyRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * ApplicationStatus contains status information for the application
         */
        export interface ApplicationStatus {
            /**
             * Conditions is a list of currently observed application conditions
             */
            conditions?: outputs.argoproj.v1alpha1.ApplicationStatusConditions[];
            /**
             * Health contains information about the application's current health status
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusHealth;
            /**
             * History contains information about the application's sync history
             */
            history?: outputs.argoproj.v1alpha1.ApplicationStatusHistory[];
            /**
             * ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
             */
            observedAt?: string;
            /**
             * OperationState contains information about any ongoing operations, such as a sync
             */
            operationState?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstate;
            /**
             * ReconciledAt indicates when the application state was reconciled using the latest git version
             */
            reconciledAt?: string;
            /**
             * ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree
             */
            resourceHealthSource?: string;
            /**
             * Resources is a list of Kubernetes resources managed by this application
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusResources[];
            /**
             * SourceType specifies the type of this application
             */
            sourceType?: string;
            /**
             * SourceTypes specifies the type of the sources included in the application
             */
            sourceTypes?: string[];
            /**
             * Summary contains a list of URLs and container images used by this application
             */
            summary?: outputs.argoproj.v1alpha1.ApplicationStatusSummary;
            /**
             * Sync contains information about the application's current sync status
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusSync;
        }

        /**
         * ApplicationCondition contains details about an application condition, which is usally an error or warning
         */
        export interface ApplicationStatusConditions {
            /**
             * LastTransitionTime is the time the condition was last observed
             */
            lastTransitionTime?: string;
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Type is an application condition type
             */
            type: string;
        }

        /**
         * Health contains information about the application's current health status
         */
        export interface ApplicationStatusHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * RevisionHistory contains history information about a previous sync
         */
        export interface ApplicationStatusHistory {
            /**
             * DeployStartedAt holds the time the sync operation started
             */
            deployStartedAt?: string;
            /**
             * DeployedAt holds the time the sync operation completed
             */
            deployedAt: string;
            /**
             * ID is an auto incrementing identifier of the RevisionHistory
             */
            id: number;
            /**
             * Revision holds the revision the sync was performed against
             */
            revision?: string;
            /**
             * Revisions holds the revision of each source in sources field the sync was performed against
             */
            revisions?: string[];
            /**
             * Source is a reference to the application source used for the sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySource;
            /**
             * Sources is a reference to the application sources used for the sync operation
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySources[];
        }

        /**
         * Source is a reference to the application source used for the sync operation
         */
        export interface ApplicationStatusHistorySource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusHistorySourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusHistorySourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationStatusHistorySources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusHistorySourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusHistorySourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusHistorySourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusHistorySourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusHistorySourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * OperationState contains information about any ongoing operations, such as a sync
         */
        export interface ApplicationStatusOperationstate {
            /**
             * FinishedAt contains time of operation completion
             */
            finishedAt?: string;
            /**
             * Message holds any pertinent messages when attempting to perform operation (typically errors).
             */
            message?: string;
            /**
             * Operation is the original requested operation
             */
            operation: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperation;
            /**
             * Phase is the current phase of the operation
             */
            phase: string;
            /**
             * RetryCount contains time of operation retries
             */
            retryCount?: number;
            /**
             * StartedAt contains time of operation start
             */
            startedAt: string;
            /**
             * SyncResult is the result of a Sync operation
             */
            syncResult?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresult;
        }

        /**
         * Operation is the original requested operation
         */
        export interface ApplicationStatusOperationstateOperation {
            /**
             * Info is a list of informational items for this operation
             */
            info?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationInfo[];
            /**
             * InitiatedBy contains information about who initiated the operations
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationInitiatedby;
            /**
             * Retry controls the strategy to apply if a sync fails
             */
            retry?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationRetry;
            /**
             * Sync contains parameters for the operation
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSync;
        }

        export interface ApplicationStatusOperationstateOperationInfo {
            name: string;
            value: string;
        }

        /**
         * InitiatedBy contains information about who initiated the operations
         */
        export interface ApplicationStatusOperationstateOperationInitiatedby {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Username contains the name of a user who started operation
             */
            username?: string;
        }

        /**
         * Retry controls the strategy to apply if a sync fails
         */
        export interface ApplicationStatusOperationstateOperationRetry {
            /**
             * Backoff controls how to backoff on subsequent retries of failed syncs
             */
            backoff?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationRetryBackoff;
            /**
             * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
             */
            limit?: number;
        }

        /**
         * Backoff controls how to backoff on subsequent retries of failed syncs
         */
        export interface ApplicationStatusOperationstateOperationRetryBackoff {
            /**
             * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
             */
            duration?: string;
            /**
             * Factor is a factor to multiply the base duration after each failed retry
             */
            factor?: number;
            /**
             * MaxDuration is the maximum amount of time allowed for the backoff strategy
             */
            maxDuration?: string;
        }

        /**
         * Sync contains parameters for the operation
         */
        export interface ApplicationStatusOperationstateOperationSync {
            /**
             * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune specifies to delete resources from the cluster that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources shall be part of the sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncResources[];
            /**
             * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to If omitted, will use the revision specified in app spec.
             */
            revisions?: string[];
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSource;
            /**
             * Sources overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSources[];
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationStatusOperationstateOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
            namespace?: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
         */
        export interface ApplicationStatusOperationstateOperationSyncSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusOperationstateOperationSyncSourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationStatusOperationstateOperationSyncSources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateOperationSyncSourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusOperationstateOperationSyncSourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategy {
            /**
             * Apply will perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateOperationSyncSyncstrategyHook;
        }

        /**
         * Apply will perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationStatusOperationstateOperationSyncSyncstrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * SyncResult is the result of a Sync operation
         */
        export interface ApplicationStatusOperationstateSyncresult {
            /**
             * Resources contains a list of sync result items for each individual resource in a sync operation
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultResources[];
            /**
             * Revision holds the revision this sync operation was performed to
             */
            revision: string;
            /**
             * Revisions holds the revision this sync operation was performed for respective indexed source in sources field
             */
            revisions?: string[];
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSource;
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSources[];
        }

        /**
         * ResourceResult holds the operation result details of a specific resource
         */
        export interface ApplicationStatusOperationstateSyncresultResources {
            /**
             * Group specifies the API group of the resource
             */
            group: string;
            /**
             * HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
             */
            hookPhase?: string;
            /**
             * HookType specifies the type of the hook. Empty for non-hook resources
             */
            hookType?: string;
            /**
             * Kind specifies the API kind of the resource
             */
            kind: string;
            /**
             * Message contains an informational or error message for the last sync OR operation
             */
            message?: string;
            /**
             * Name specifies the name of the resource
             */
            name: string;
            /**
             * Namespace specifies the target namespace of the resource
             */
            namespace: string;
            /**
             * Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
             */
            status?: string;
            /**
             * SyncPhase indicates the particular phase of the sync that this result was acquired in
             */
            syncPhase?: string;
            /**
             * Version specifies the API version of the resource
             */
            version: string;
        }

        /**
         * Source records the application source information of the sync, used for comparing auto-sync
         */
        export interface ApplicationStatusOperationstateSyncresultSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateSyncresultSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusOperationstateSyncresultSourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationStatusOperationstateSyncresultSources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationstateSyncresultSourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusOperationstateSyncresultSourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusOperationstateSyncresultSourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
         */
        export interface ApplicationStatusResources {
            group?: string;
            /**
             * HealthStatus contains information about the currently observed health state of an application or resource
             */
            health?: outputs.argoproj.v1alpha1.ApplicationStatusResourcesHealth;
            hook?: boolean;
            kind?: string;
            name?: string;
            namespace?: string;
            requiresPruning?: boolean;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status?: string;
            syncWave?: number;
            version?: string;
        }

        /**
         * HealthStatus contains information about the currently observed health state of an application or resource
         */
        export interface ApplicationStatusResourcesHealth {
            /**
             * Message is a human-readable informational message describing the health status
             */
            message?: string;
            /**
             * Status holds the status code of the application or resource
             */
            status?: string;
        }

        /**
         * Summary contains a list of URLs and container images used by this application
         */
        export interface ApplicationStatusSummary {
            /**
             * ExternalURLs holds all external URLs of application child resources.
             */
            externalURLs?: string[];
            /**
             * Images holds all images of application child resources.
             */
            images?: string[];
        }

        /**
         * Sync contains information about the application's current sync status
         */
        export interface ApplicationStatusSync {
            /**
             * ComparedTo contains information about what has been compared
             */
            comparedTo?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedto;
            /**
             * Revision contains information about the revision the comparison has been performed to
             */
            revision?: string;
            /**
             * Revisions contains information about the revisions of multiple sources the comparison has been performed to
             */
            revisions?: string[];
            /**
             * Status is the sync state of the comparison
             */
            status: string;
        }

        /**
         * ComparedTo contains information about what has been compared
         */
        export interface ApplicationStatusSyncComparedto {
            /**
             * Destination is a reference to the application's destination used for comparison
             */
            destination: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoDestination;
            /**
             * Source is a reference to the application's source used for comparison
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSource;
            /**
             * Sources is a reference to the application's multiple sources used for comparison
             */
            sources?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSources[];
        }

        /**
         * Destination is a reference to the application's destination used for comparison
         */
        export interface ApplicationStatusSyncComparedtoDestination {
            /**
             * Name is an alternate way of specifying the target cluster by its symbolic name
             */
            name?: string;
            /**
             * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
             */
            namespace?: string;
            /**
             * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
             */
            server?: string;
        }

        /**
         * Source is a reference to the application's source used for comparison
         */
        export interface ApplicationStatusSyncComparedtoSource {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcePlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourceHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedtoSourceKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcePlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcePluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcePluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusSyncComparedtoSourcePluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusSyncComparedtoSourcePluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

        /**
         * ApplicationSource contains all required information about the source of an application
         */
        export interface ApplicationStatusSyncComparedtoSources {
            /**
             * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesHelm;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesKustomize;
            /**
             * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
             */
            path?: string;
            /**
             * Plugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesPlugin;
            /**
             * Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
             */
            ref?: string;
            /**
             * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcesDirectory {
            /**
             * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
             */
            exclude?: string;
            /**
             * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
             */
            include?: string;
            /**
             * Jsonnet holds options specific to Jsonnet
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesDirectoryJsonnet;
            /**
             * Recurse specifies whether to scan a directory recursively for manifests
             */
            recurse?: boolean;
        }

        /**
         * Jsonnet holds options specific to Jsonnet
         */
        export interface ApplicationStatusSyncComparedtoSourcesDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesDirectoryJsonnetExtvars[];
            /**
             * Additional library search dirs
             */
            libs?: string[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourcesDirectoryJsonnetExtvars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourcesDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcesHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesHelmFileparameters[];
            /**
             * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
             */
            ignoreMissingValueFiles?: boolean;
            /**
             * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesHelmParameters[];
            /**
             * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
             */
            passCredentials?: boolean;
            /**
             * ReleaseName is the Helm release name to use. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
             */
            skipCrds?: boolean;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values specifies Helm values to be passed to helm template, typically defined as a block
             */
            values?: string;
            /**
             * Version is the Helm version to use for templating ("3")
             */
            version?: string;
        }

        /**
         * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourcesHelmFileparameters {
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Path is the path to the file containing the values for the Helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter that's passed to helm template during manifest generation
         */
        export interface ApplicationStatusSyncComparedtoSourcesHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the Helm parameter
             */
            name?: string;
            /**
             * Value is the value for the Helm parameter
             */
            value?: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcesKustomize {
            /**
             * CommonAnnotations is a list of additional annotations to add to rendered manifests
             */
            commonAnnotations?: {[key: string]: string};
            /**
             * CommonLabels is a list of additional labels to add to rendered manifests
             */
            commonLabels?: {[key: string]: string};
            /**
             * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
             */
            forceCommonAnnotations?: boolean;
            /**
             * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
             */
            forceCommonLabels?: boolean;
            /**
             * Images is a list of Kustomize image override specifications
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for Kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for Kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version controls which version of Kustomize to use for rendering manifests
             */
            version?: string;
        }

        /**
         * Plugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedtoSourcesPlugin {
            /**
             * Env is a list of environment variable entries
             */
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesPluginEnv[];
            name?: string;
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedtoSourcesPluginParameters[];
        }

        /**
         * EnvEntry represents an entry in the application's environment
         */
        export interface ApplicationStatusSyncComparedtoSourcesPluginEnv {
            /**
             * Name is the name of the variable, usually expressed in uppercase
             */
            name: string;
            /**
             * Value is the value of the variable
             */
            value: string;
        }

        export interface ApplicationStatusSyncComparedtoSourcesPluginParameters {
            /**
             * Array is the value of an array type parameter.
             */
            array?: string[];
            /**
             * Map is the value of a map type parameter.
             */
            map?: {[key: string]: string};
            /**
             * Name is the name identifying a parameter.
             */
            name?: string;
            /**
             * String_ is the value of a string type parameter.
             */
            string?: string;
        }

    }
}
